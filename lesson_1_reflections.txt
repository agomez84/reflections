How did viewing a diff between two versions of a file help you see the bug that was introduced?

	It helped, but it is a slow and not too confortable method, from my point of view. 

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

	It would help by allowing the programmer to go back to previous versions of the file after detecting some bug or problem, or after making a mistake.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

	Some pros are that you can accurately select when and how to save certain bits of code, so they become organized and easy to search. The main con is that you may miss saving something at some point, and wouldn't be able to have a relatively recent version.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

	Because in Git, several files might be interconnected and dependant on each other, while in Google Docs, such relationship doesn't make much sense, since most files don't interact with others (except, for example, some spreadsheets).

How can you use the commands git log and git diff to view the history of files?

	I can use git log to get a full log of commits, then scroll to find those that I want to compare, and press q to stop the log. Then, I can use git diff to find the differences between both.

How might using version control make you more confident to make changes that could break something?

	Just by knowing that I can come back to any previous state that I saved (commit) anytime, compare it with other commits and fix it or simply continue where things were Ok.	

Now that you have your workspace set up, what do you want to try using Git for?

	Version control for developing an Android App from scratch.



